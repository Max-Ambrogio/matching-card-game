{"version":3,"file":"matchCard.js","names":["MatchingCardGame","selector","btn","gameEl","querySelector","addEventListener","startGame","resultsEl","cardsChosen","cardsChosenId","cardArray","deck","Deck","grid","document","deckPosition","gameArea","flipCard","createCardGrid","scoreUpdate","scoreBoardEl","Score","gameCompleted","resetBtn","console","log","cards","classList","add","evt","tgt","target","slotId","parseInt","parentElement","dataset","slot","cardId","value","card","cardEvent","CustomEvent","cardDiv","selectdCard","toggle","dispatchEvent","push","length","setTimeout","checkMatch","winnner","detail","winner","textContent","restart","setup","i","GAME_BOARD_SIZE","cardData","createElement","getNextCard","append","getCardElement","setAttribute","slotOne","slotTwo","cardOne","cardTwo","alert","removeCards","updateScore","unFlip","querySelectorAll","forEach","remove","refresh","newCardOne","newCardOneEl","newCardTwo","newCardTwoEl","firstCard","secondCard","removeFirstCard","firstChild","removeFirstSlot","splice","removeSecondCard","removeSecondSlot","scoreEvt","window","location","reload","Game"],"sources":["matchCard.js"],"sourcesContent":["class MatchingCardGame extends Game {\r\n\r\n    static GAME_BOARD_SIZE = 12\r\n\r\n    constructor(selector){\r\n        super(selector)\r\n        this.setup()\r\n        // this.createCard()\r\n    }\r\n\r\n    setup = () => {\r\n        const btn = this.gameEl.querySelector('.start')\r\n        btn.addEventListener('click',this.startGame)\r\n\r\n        this.resultsEl = this.gameEl.querySelector(\"#round-result\")\r\n\r\n        this.cardsChosen = []\r\n        this.cardsChosenId = []\r\n        this.cardArray = []\r\n\r\n        this.deck = new Deck()\r\n        this.grid = document.querySelector('.game-area')\r\n        this.deckPosition = document.querySelector('.deck')\r\n\r\n        this.gameArea.addEventListener('click' , this.flipCard)\r\n\r\n        this.createCardGrid()\r\n        \r\n        const scoreUpdate = this.scoreBoardEl.querySelector('#scoreboard')\r\n        new Score(scoreUpdate)\r\n\r\n        document.addEventListener('game-over', this.gameCompleted)\r\n\r\n        this.resetBtn = document.querySelector('.reset')\r\n\r\n    }\r\n   \r\n    //run create deck function 12 times but from the same array.\r\n    //wrapper on cards = data-slot=\"1\"\r\n    //set data attribute \r\n    //create div to assign the data slot to \r\n    //array = gameboard size draw card appends to the grid\r\n    //update display cards loops through grid to append to dom\r\n\r\n\r\n    //seperate methods \r\n   \r\n    startGame = () => {\r\n        console.log(this.deck.cards)\r\n        console.log(this.cardArray)\r\n   \r\n        //applicable to start game\r\n        this.grid.classList.add('show')\r\n        \r\n        // gsap.from('.card', {\r\n        //     opacity:0,\r\n        //     y: -100,\r\n        //     duration:1,\r\n        // })\r\n    }\r\n\r\n    createCardGrid(){\r\n        this.grid.classList.add('hide')\r\n       \r\n        //seperate creating the slots from the card creation\r\n        for(let i = 0; i < MatchingCardGame.GAME_BOARD_SIZE; i++){\r\n            const cardData = document.createElement('div')\r\n            // const cardBack = document.createElement('div')\r\n            // cardBack.classList.add('back')\r\n            this.card = this.deck.getNextCard()\r\n            cardData.append(this.card.getCardElement())\r\n            // cardData.append(cardBack)\r\n            cardData.setAttribute(\"data-slot\", i)\r\n            this.cardArray.push(this.card)\r\n            this.grid.append(cardData)\r\n       \r\n        }\r\n        console.log(this.cardArray)\r\n    }\r\n    \r\n\r\n    //add custom event that checks if card has been flipped over\r\n    // position in the grid [0-11] if [1 === 3] draw and replace cards\r\n    flipCard = (evt) => {\r\n        //switch this elemnts that areent used elsewhere\r\n        const tgt = evt.target\r\n        const slotId = parseInt(tgt.parentElement.dataset.slot)\r\n        console.log('slot id', slotId)\r\n        const cardId = tgt.dataset.value\r\n        console.log(cardId)\r\n\r\n        \r\n\r\n        const card = this.cardArray[slotId]\r\n        console.log(card)\r\n\r\n        const cardEvent = new CustomEvent('flip')\r\n        \r\n        //toggle class on the dom to show flipped\r\n        this.cardDiv = this.grid.querySelector(`[data-slot=\"${slotId}\"]`)\r\n        const selectdCard = this.cardDiv.querySelector('.card')\r\n        console.log(this.cardDiv)\r\n        this.cardDiv.addEventListener('flip', function(){\r\n            selectdCard.classList.toggle('toggleCard')\r\n        })\r\n        this.cardDiv.dispatchEvent(cardEvent)\r\n        this.cardsChosen.push(slotId)\r\n\r\n        if (this.cardsChosen.length === 2){\r\n            setTimeout(() => {\r\n                this.checkMatch()\r\n            }, 500)\r\n        }\r\n\r\n        //if match = empty div slots add new \r\n        //if not then flip back over\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n\r\n    //add function that checks if face card / # matches\r\n    //slot ids\r\n    checkMatch(){\r\n\r\n        \r\n\r\n        this.slotOne = this.cardsChosen[0]\r\n        this.slotTwo = this.cardsChosen[1]\r\n\r\n        this.cardOne = this.cardArray[this.slotOne]\r\n        this.cardTwo = this.cardArray[this.slotTwo]\r\n\r\n        console.log(this.cardOne)\r\n        console.log(this.cardTwo)\r\n    \r\n        if(this.cardOne.value === this.cardTwo.value){\r\n            alert('you got a match')\r\n            this.removeCards()\r\n            this.updateScore()\r\n        } else {\r\n            alert('no match')   \r\n            const unFlip = this.grid.querySelectorAll('.toggleCard')\r\n\r\n            unFlip.forEach(function(unFlip){\r\n                unFlip.classList.remove('toggleCard')\r\n            })\r\n    \r\n            // unFlip.forEach(function(item){\r\n            //     item.addEventListener('click',function(){\r\n            //         unFlip.forEach(function(unFlip){\r\n            //             unFlip.classList.remove('toggleCard')\r\n            //         })\r\n            //     })\r\n            // })\r\n            \r\n            console.log(unFlip)\r\n            this.refresh()\r\n        }\r\n\r\n    }\r\n\r\n    refresh(){\r\n        this.cardsChosen = []\r\n        this.cardsChosenId = []\r\n\r\n        console.log(this.cardsChosen)\r\n        console.log(this.cardsChosenId)\r\n    }\r\n\r\n    // this.firstCard.classList.remove('show')\r\n    //set interval to remove from dom\r\n    //get slot for each \r\n    //get new card\r\n    //animate removeal \\\r\n    //grab two new cards and append \r\n    //first slotid = this.cardsChosen[0]\r\n    //array\r\n\r\n    removeCards(){\r\n        console.log(this.cardsChosen)\r\n\r\n        const newCardOne = this.deck.getNextCard()\r\n        const newCardOneEl = newCardOne.getCardElement()\r\n        \r\n        const newCardTwo = this.deck.getNextCard()\r\n        const newCardTwoEl = newCardTwo.getCardElement()\r\n\r\n        const firstCard = this.grid.querySelector(`[data-slot=\"${this.cardsChosen[0]}\"]`)\r\n        const secondCard = this.grid.querySelector(`[data-slot=\"${this.cardsChosen[1]}\"]`)\r\n        \r\n        // firstCard.classList.add('remove')\r\n        // secondCard.classList.add('remove')\r\n\r\n        const removeFirstCard = firstCard.firstChild.remove()\r\n        const removeFirstSlot = this.cardArray.splice(this.slotOne , 1 , newCardOne)\r\n        const removeSecondCard = secondCard.firstChild.remove()\r\n        const removeSecondSlot = this.cardArray.splice(this.slotTwo , 1 , newCardTwo)\r\n\r\n        setTimeout(() => {\r\n            // firstCard.classList.remove('remove')\r\n            firstCard.append(newCardOneEl)\r\n            console.log(firstCard)\r\n        },1000)\r\n        \r\n\r\n        setTimeout(() => {\r\n            // secondCard.classList.remove('remove')\r\n            secondCard.append(newCardTwoEl)\r\n            console.log(secondCard)\r\n            console.log(this.cardArray)\r\n        },1000)\r\n\r\n        this.refresh()\r\n        this.updateScore()\r\n    }\r\n\r\n\r\n    //add function that updates the score and cards remaing in the scoreboard\r\n    updateScore(){\r\n        console.log('hi')\r\n        const scoreEvt = new CustomEvent('score-update')\r\n        document.dispatchEvent(scoreEvt)\r\n        \r\n    }\r\n\r\n\r\n    restart(){\r\n        window.location.reload()\r\n    }\r\n\r\n    //if all cards have been matched create a congratulations message and a reset button\r\n    gameCompleted = (evt) => {\r\n        const winnner = evt.detail.winner\r\n        this.resultsEl.textContent = \"You've Matched all the cards!\"\r\n        this.resetBtn.classList.add('display')\r\n        this.resetBtn.addEventListener('click', this.restart)\r\n        \r\n\r\n    }\r\n\r\n\r\n}"],"mappings":"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"}